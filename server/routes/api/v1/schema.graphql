type Mutation {
    tagImage(tagId: ID!, imageId: ID!): TagInfo!
    deleteImage(id: ID!): Image
}

type Query {
    tagCounts: TagCounts
    image(id: ID!): Image
    images(type: ImageType, take: Int, skip: Int, tagId: ID): [Image]
    tags: [Tag]
    iterations: [Iteration]
    predictUrl(url: String!): [Prediction],
    predictFile(file: String!): [[Prediction]]
    train: Training
    predictions(file: String!): [Predictions]
    hasIterations: Boolean!
    performance: IterationPerformance
}

enum ImageType { tagged, untagged }

type TagInfo {
    tagId: ID
    imageId: ID
}

type Predictions {
    iterationId: ID
    created: String
    predictions: [Prediction]
}

type Training {
    id: ID
    name: String
    status: String
    created: String
}

type Prediction {
    tag: Tag!
    probability: Float!
    created: String
}

type Image {
    id: ID!
    created: String
    imageUrl: String
    thumbnailUrl: String
    hasTags: Boolean
    tags: [Tag]
}

type Tag {
    id: ID
    name: String
    imageCount: Int
}

type TagCounts {
    tagged: Int!
    untagged: Int!
}

type Iteration {
    id: ID
    name: String
    status: String
    created: String
}

type TagPerformance {
    id: ID
    name: String
    precision: Float
    precisionStdDeviation: Float
    recall: Float
    recallStdDeviation: Float
    averagePrecision: Float
}

type IterationPerformance {
    perTagPerformance: [TagPerformance]
    precision: Float
    precisionStdDeviation: Float
    recall: Float
    recallStdDeviation: Float
    averagePrecision: Float
}