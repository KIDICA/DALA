#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('vision:server');
const config = require("../config/config.json");
const path = require("path");
const fs = require("fs");
const logger = require("../utils/logger");

/**
 * Get port from environment and store in Express.
 */
const PORT = normalizePort(process.env.PORT || '3000');
app.set('port', PORT);

let server;

if (PORT === 443) {
  const pathCert = path.join(__dirname, "/../", config.ssl.cert);
  const pathKey = path.join(__dirname, "/../", config.ssl.key);

  if (!fs.existsSync(pathCert)) {
    throw new Error(`Certificate file missing ${pathCert}`)
  }
  if (!fs.existsSync(pathKey)) {
    throw new Error(`Certificate file missing ${pathKey}`)
  }

  server = require("https").createServer({
    key: fs.readFileSync(pathKey),
    cert: fs.readFileSync(pathCert)
  }, app);
} else {
  server = require("http").createServer(app);
}

const event = require("../../client/src/config/events.json");
const io = require("socket.io")(server);
let socketClients = 0;

io.on("connection", socket => {
  logger.debug("socket-connected");
  socketClients += 1;

  socket.broadcast.emit(event.socket.broadcast.clientCount, socketClients);
  socket.emit(event.socket.broadcast.clientCount, socketClients);

  // Allows debugging client issues by sending the to the server
  // and writing them to the log file in production.
  socket.on(event.socket.clientError, messages => {
    logger.error({prefix: "client-error", message: messages});
  });

  // Vuex centrally manages these counters and are therefore broad-casted to all clients.
  socket.on(event.socket.broadcast.image.upload, image => {
    socket.broadcast.emit(event.socket.broadcast.image.upload, image);
    socket.emit(event.socket.broadcast.image.upload, image);
  });

  socket.on(event.socket.broadcast.image.tagged, tag => {
    socket.broadcast.emit(event.socket.broadcast.image.tagged, tag);
    socket.emit(event.socket.broadcast.image.tagged, tag);
  });

  socket.on(event.socket.broadcast.image.remove, image => {
    socket.broadcast.emit(event.socket.broadcast.image.remove, image);
    socket.emit(event.socket.broadcast.image.remove, image);
  });

  socket.on('disconnect', () => socketClients -= 1);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(PORT);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof PORT === 'string'
    ? 'Pipe ' + PORT
    : 'Port ' + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}